// <auto-generated />
using System;
using App.Infrastructure.DataBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.DataBase.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id")
                        .HasName("PK__Brands__3214EC07D5C50981");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ParentModelId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ForComment")
                        .HasColumnType("bit");

                    b.Property<bool>("ForProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("ForUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("App.Domain.Core.Comment.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEditTimeStatus")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SubmitUserId")
                        .HasColumnType("int");

                    b.Property<string>("TextComment")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nchar(300)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubmitUserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Core.Comment.Entities.CommentImpression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImpressionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImpressionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SubmmitUserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__CommentI__3214EC07A9D6DC18");

                    b.HasIndex("CommentId");

                    b.HasIndex("ImpressionTypeId");

                    b.HasIndex("SubmmitUserId");

                    b.ToTable("CommentImpressions");
                });

            modelBuilder.Entity("App.Domain.Core.Comment.Entities.ImpressionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ImpressionTypes");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.CollectionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ProductId");

                    b.ToTable("CollectionProducts");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrginal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowPrice")
                        .HasColumnType("bit");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SubmitOperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ModelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubmitOperatorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<bool>("Isexit")
                        .HasColumnType("bit")
                        .HasColumnName("ISExit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFiles");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ViewerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ViewerUserId");

                    b.ToTable("ProductViews");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasValue")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TagCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagCategoryId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.TagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TagCategories");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.TypeFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ValidExtentions")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id")
                        .HasName("PK_FileTypes");

                    b.ToTable("TypeFiles");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BrithDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMobileVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Category", b =>
                {
                    b.HasOne("App.Domain.Core.BaseData.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Model", b =>
                {
                    b.HasOne("App.Domain.Core.BaseData.Entities.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Models_Brands");

                    b.HasOne("App.Domain.Core.BaseData.Entities.Model", "ParentModel")
                        .WithMany()
                        .HasForeignKey("ParentModelId");

                    b.Navigation("Brand");

                    b.Navigation("ParentModel");
                });

            modelBuilder.Entity("App.Domain.Core.Comment.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Product.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Products");

                    b.HasOne("App.Domain.Core.BaseData.Entities.Status", "Status")
                        .WithMany("Comments")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Statuses");

                    b.HasOne("App.Domain.Core.User.Entities.User", "SubmitUser")
                        .WithMany("Comments")
                        .HasForeignKey("SubmitUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Users");

                    b.Navigation("Product");

                    b.Navigation("Status");

                    b.Navigation("SubmitUser");
                });

            modelBuilder.Entity("App.Domain.Core.Comment.Entities.CommentImpression", b =>
                {
                    b.HasOne("App.Domain.Core.Comment.Entities.Comment", "Comment")
                        .WithMany("CommentImpressions")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK_CommentImpressions_Comments");

                    b.HasOne("App.Domain.Core.Comment.Entities.ImpressionType", "ImpressionType")
                        .WithMany("CommentImpressions")
                        .HasForeignKey("ImpressionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CommentImpressions_ImpressionTypes");

                    b.HasOne("App.Domain.Core.User.Entities.User", "SubmmitUser")
                        .WithMany("CommentImpressions")
                        .HasForeignKey("SubmmitUserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommentImpressions_Users");

                    b.Navigation("Comment");

                    b.Navigation("ImpressionType");

                    b.Navigation("SubmmitUser");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.CollectionProduct", b =>
                {
                    b.HasOne("App.Domain.Core.BaseData.Entities.Collection", "Collection")
                        .WithMany("CollectionProducts")
                        .HasForeignKey("CollectionId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionProducts_Collections");

                    b.HasOne("App.Domain.Core.Product.Entities.Product", "Product")
                        .WithMany("CollectionProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_CollectionProducts_Products");

                    b.Navigation("Collection");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.Product", b =>
                {
                    b.HasOne("App.Domain.Core.BaseData.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Brands");

                    b.HasOne("App.Domain.Core.BaseData.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("App.Domain.Core.BaseData.Entities.Model", "Model")
                        .WithMany("Products")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("FK_Products_Models");

                    b.HasOne("App.Domain.Core.BaseData.Entities.Status", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Statuses");

                    b.HasOne("App.Domain.Core.User.Entities.User", "SubmitOperator")
                        .WithMany("Products")
                        .HasForeignKey("SubmitOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Users");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Model");

                    b.Navigation("Status");

                    b.Navigation("SubmitOperator");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductColor", b =>
                {
                    b.HasOne("App.Domain.Core.BaseData.Entities.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ColorId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductColors_Colors");

                    b.HasOne("App.Domain.Core.Product.Entities.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductColors_Products");

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductFile", b =>
                {
                    b.HasOne("App.Domain.Core.Product.Entities.TypeFile", "FileType")
                        .WithMany("ProductFiles")
                        .HasForeignKey("FileTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductFiles_TypeFiles");

                    b.HasOne("App.Domain.Core.Product.Entities.Product", "Product")
                        .WithMany("ProductFiles")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductFiles_Products");

                    b.Navigation("FileType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductTag", b =>
                {
                    b.HasOne("App.Domain.Core.Product.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductTags_Products");

                    b.HasOne("App.Domain.Core.Product.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductTags_Tags");

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.ProductView", b =>
                {
                    b.HasOne("App.Domain.Core.Product.Entities.Product", "Product")
                        .WithMany("ProductViews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductViews_Products");

                    b.HasOne("App.Domain.Core.User.Entities.User", "ViewerUser")
                        .WithMany("ProductViews")
                        .HasForeignKey("ViewerUserId")
                        .HasConstraintName("FK_ProductViews_Users");

                    b.Navigation("Product");

                    b.Navigation("ViewerUser");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.Tag", b =>
                {
                    b.HasOne("App.Domain.Core.Product.Entities.TagCategory", "TagCategory")
                        .WithMany("Tags")
                        .HasForeignKey("TagCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Tags_TagCategories");

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.User", b =>
                {
                    b.HasOne("App.Domain.Core.User.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.HasOne("App.Domain.Core.BaseData.Entities.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Statuses");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Collection", b =>
                {
                    b.Navigation("CollectionProducts");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Model", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Core.BaseData.Entities.Status", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.Comment.Entities.Comment", b =>
                {
                    b.Navigation("CommentImpressions");
                });

            modelBuilder.Entity("App.Domain.Core.Comment.Entities.ImpressionType", b =>
                {
                    b.Navigation("CommentImpressions");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.Product", b =>
                {
                    b.Navigation("CollectionProducts");

                    b.Navigation("Comments");

                    b.Navigation("ProductColors");

                    b.Navigation("ProductFiles");

                    b.Navigation("ProductTags");

                    b.Navigation("ProductViews");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.TagCategory", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("App.Domain.Core.Product.Entities.TypeFile", b =>
                {
                    b.Navigation("ProductFiles");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Domain.Core.User.Entities.User", b =>
                {
                    b.Navigation("CommentImpressions");

                    b.Navigation("Comments");

                    b.Navigation("ProductViews");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
